class Kreis {
private:			// Zugriff nur innerhalb der Klasse, kann weggelassen werden
	...
public: 			// Zugriff von überall
	float radius;  		// Zuweisung von Eigenschaften der Klasse
	Kreis(float);  		// das ist der Konstruktor
	float flaeche() { 	// Definition einer Methode wie Funktion
		return 3.141 * radius * radius
	} 			
};				// Semicolon benötigt
Kreis::Kreis(float r) {		// Implementierung des Konstruktors außerhalb der Klasse
	radius = r; 		
}

int main() {
	Kreis kleinerKreis(20); // erzeugt Kreis-Objekt mit Namen kleinerKreis
}

- Konstruktoren können überladen werden. Sollte ein Konstruktor ohne Parameter aufgerufen werden, dürfen hinter dem Objektnamen keine Klammern stehen:
	Kreis großerKreis;
- Kurzschreibweise zur Wertzuweisung im Konstruktor:
	Kreis(float r): radius(r)  {} 	// geschweifte Klammern benötigt, können leer sein
Operatoren überladen:
type operator + (type b){		// überladen werden können +,-,*,/,=,>,<,==,+=,<<,<<= etc.
	return type(this->eigenschaft + b.eigenschaft)
}
Statische Werte besitzen für alle Instanzen einer Klasse den selben Wert
…
	public:
		static int val;		// Deklaration innerhalb der Klasse
…
Class::val = 3;				// Wert wird für jede Instanz gesetzt

Friendship:
- eine befreundete Funktion kann auf private Eigenschaften einer Klasse zugreifen:
friend typ func(class); 		// Erwähnung in der Klasse, spätere Definition

Vererbung:
class Klasse: public ElternKlasse{}	// public/private/protected beschreibt Vererbungsart
Public: es werden public-Klassen als public und protected als protected und private nicht vererbt
Protected: public und protected werden protected vererbt, private nicht
Private: public und protected werden private vererbt, private nicht
- Konstruktoren/Destruktoren/überladene Funktionen/Friendships werden nicht vererbt

Dynamische Bindung:
Bei Casting in Elternklasse gehen Informationen verloren ( Hund bebi; Tier bebi_tier = bebi;). Deshalb wird statt einer Instanz ein Pointer gecastet (Tier *bebi_tier = &bebi). Um bei einem Funktionsaufruf des Pointer die Metod der erbenden Klasse zu verwenden, muss das Schlüsselwort virtual vorangestellt werden

Mehrfachvererbung
class Hund: public Tier, public Blindenfuehrer{}
Achtung: Methoden, die den gleichen Namen in beiden Elternklassen haben, müssen in der Klasse überschrieben werden

Übernahme der Funktion aus einer Elternklasse:
void func(){parent::func();}
Pure Virtual Funktion
virtual void func() = 0; 		// Funktion muss überschrieben werden, also abstrakt

Tausch zweier Objekte:
# include <utility>
std::swap(object1, object2);
